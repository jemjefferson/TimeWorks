@model Employee;
@{
    bool result = false;
    foreach (EmployeeJobCode jc in Model.EmployeeJobCodes){
        if (jc.Active == true){
            result = true;
            break;
        } 
    }
}

<head>
    <style>
        :root {
            --pathBase: "@Context.Request.PathBase";
        }</style> @* CSS path base variable: use var(--pathBase) when behind reverse proxy. *@
    <script>const pathBase = "@Context.Request.PathBase";</script> @* JavaScript path base variable: use pathBase when behind reverse proxy. *@
    <script src="~/scripts/site.js" defer></script>
    <link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="~/css/site.css" rel="stylesheet" type="text/css" />
</head>
<header>
    <ul class="navbar">
        <li><img class="navbar-logo" src="~/Images/timeworks.png" /></li>
        <li class="navbar-link"><a href="/">Home</a></li>
        <li class="navbar-link"><a href="/timecard">Timecard</a></li>
        @if (result = true)
        {
            @if (User.Identity.IsAuthenticated && (User.IsInRole("Admin") || User.IsInRole("Management")))
            {
                <li class="navbar-link"><a href="/management">Management</a></li>
            }
            @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
            {
                <li class="navbar-link"><a href="/admin">Admin</a></li>
            }
        }
            <li class="navbar-user"><div><img onclick="accountLoad(event, this)" class="navbar-logo" src="~/Images/user.png" /></div></li>
    </ul>
</header>
<script>
    let counter = 0;
    setInterval(() => {
        counter++;
        if (counter > 60) {
            location.reload();
        }
    }, 1000);
</script>